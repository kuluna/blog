<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>kuluna.class</title>
    <link>https://kuluna.github.io/blog/</link>
    <description>Recent content on kuluna.class</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <copyright>Powered by [Hugo](http://gohugo.io).</copyright>
    <lastBuildDate>Sun, 30 Jul 2017 15:25:01 +0900</lastBuildDate>
    
	<atom:link href="https://kuluna.github.io/blog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Azure App Service にSFTPでログインするときのユーザー名</title>
      <link>https://kuluna.github.io/blog/post/20170730/</link>
      <pubDate>Sun, 30 Jul 2017 15:25:01 +0900</pubDate>
      
      <guid>https://kuluna.github.io/blog/post/20170730/</guid>
      <description>ちゃんとよく見ればいいってだけの話です。
Azure App Service ではデプロイする領域にSFTP(FTP)ではいることができます。デプロイパイプラインを組む前に、App Service へファイルを送信したいときに使えます。
FTPログイン設定 Azureのポータルから設定したいApp Serviceを開き、 デプロイ資格情報 を選択します。
FTPでログインするユーザー名とパスワードをここで作成します。
概要に戻るとSFTPのアドレスができてますので、これをコピーします。あとユーザー名ですが、先ほどの azureftplogin ではなく、　macaron\azureftplogin なことに気を付けてください。
頭にmacaronとついているのはこの App Service の名前がmacaronだからだと思います。
あとはWindows環境であれば、エクスプローラーにSFTPのアドレスを貼り付けて、上のユーザー名と設定したパスワードを入力すればログインできます。
site/wwwroot/ にデプロイして App Service を再起動すると反映されます。kuduを使うとこういったデプロイを自動でしてくれますが、FTPでのデプロイの場合はweb.configも自分で用意する必要がある点に注意してください。</description>
    </item>
    
    <item>
      <title>Webでテスト管理できるツールを作ろうとしている</title>
      <link>https://kuluna.github.io/blog/post/20170729/</link>
      <pubDate>Sat, 29 Jul 2017 18:24:32 +0900</pubDate>
      
      <guid>https://kuluna.github.io/blog/post/20170729/</guid>
      <description>GitHubで草を生やすために作っています。
kuluna/macaron: Test sweet tool
簡単にいうとテストケースをWeb上で作成し実施するWebアプリです。
テストケース テスト一覧
テスト作成
テストケースを作成する項目はとてもシンプルにしています。Markdown形式で入力できるようにしています。
テスト計画 対象のテストケースが今どれぐらいテストされているのかを見る画面です。開発中なのでいろいろ雑な表示です。
テスト実施 上に現在実施中のテストが表示されて、切り替えて次々とテストを記録していく感じです。
作ってて気づいた事 このレベルならExcelでよくね？
確かに今の私の職場でもテスト仕様書はExcelで共有しています。
Excelとなるとバージョン管理が大変だったり、だれかが開いていると他の人が編集できなかったりと不便極まりないので、しばらく自分で使ってみてWebならではの良さを盛り込めていければなーと考えています。
もしWebのテスト管理で何か欲しい機能があったりしたらGitHub経由で教えていただけると大変うれしいですね。</description>
    </item>
    
    <item>
      <title>ASP.NET Coreで常にHTTPSにリダイレクトする</title>
      <link>https://kuluna.github.io/blog/post/20170723/</link>
      <pubDate>Sun, 23 Jul 2017 11:37:28 +0900</pubDate>
      
      <guid>https://kuluna.github.io/blog/post/20170723/</guid>
      <description>従来のASP.NETではweb.configをたくさんいじってあれこれ設定していましたが、ASP.NET CoreからはほとんどをStartup.csに記述するようなりました。
個人的にもそのほうがコンパイルエラーで設定ミスとかが分かるのでこっちのほうが好きですね。
環境  .net core 1.1  HTTPSにリダイレクトする Rewriteのインストール HTTPでアクセスしたときにHTTPSへリダイレクトするのもStartup.csで設定するようになりました。
まずはNugetからリダイレクトするライブラリをインストールします。
NugetでMicrosoft.AspNetCore.Rewriteを検索してインストールします。あるいはcsprojに直接書いてもOKです。
&amp;lt;ItemGroup&amp;gt; &amp;lt;PackageReference Include=&amp;quot;Microsoft.AspNetCore.Rewrite&amp;quot; Version=&amp;quot;1.0.2&amp;quot; /&amp;gt; &amp;lt;/ItemGroup&amp;gt;  csprojに直接書いた場合はdotnet restoreコマンドを忘れずに実行しましょう。
リダイレクト設定 Startup.csで編集する箇所は2か所です。
public void ConfigureServices(IServiceCollection services) { // Add framework services. services.AddMvc(); services.Configure&amp;lt;MvcOptions&amp;gt;(options =&amp;gt; { options.Filters.Add(new RequireHttpsAttribute()); }); }  public void Configure(IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerFactory) { loggerFactory.AddConsole(Configuration.GetSection(&amp;quot;Logging&amp;quot;)); loggerFactory.AddDebug(); app.UseRewriter(new RewriteOptions().AddRedirectToHttps()); app.UseMvc(); }  上ではASP.NET Core全体にHTTPSを必須とする属性を追加します。
下ではHTTPでアクセスしたときにHTTPSでリダイレクトするように設定をしています。
Azure App ServicesではHTTPも受け付けますが、これでAzureにアップロードするとHTTPでアクセス時にHTTPSにリダイレクトされるようになります。
Googleのチェックツールを使うとHTTPからHTTPSにリダイレクトできていることが検証できます。
プロダクション時だけONにする Startup.csでは現在がどのモードで動作しているかが取得できるので、Production時だけの処理を簡単に書けます。
if (env.</description>
    </item>
    
    <item>
      <title>First commit.</title>
      <link>https://kuluna.github.io/blog/post/20170717/</link>
      <pubDate>Mon, 17 Jul 2017 00:11:38 +0900</pubDate>
      
      <guid>https://kuluna.github.io/blog/post/20170717/</guid>
      <description>これまではQiita等でいくつか技術的な内容を投稿してきましたが、 それ以外にも書く場所が欲しかったので、GitHub Pagesを使ってブログを書くことにしました。
このサイトはHugoを使って作りました。ほんとはAngularとかで作ってみたかったのですが、まずは気軽に始めたかったので。
まずは継続。</description>
    </item>
    
  </channel>
</rss>